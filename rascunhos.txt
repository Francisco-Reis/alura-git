-- git tag: --
marca numeros de versões definidos
v0.1
v0.2

-- git blame: --
Historico detalhado chegando a dar informaçoes de cada linha

-- git checkout: --
É possivel acessar versões antigas e fazer alteracoes sem afetar a versao mais recente
> git checkout v0.1
É possível tb criar um branch com as mudanças feitas para persisti-las
> git checkout -b novo_branch
Pra voltar ao mais recente, pegue o branch master
> git checkout master
Ao usar sob um arquivo, pega o arquivo mais recente do repositorio:
> git checkout arquivo.txt (Fazer isso pra eliminar mudaças indesejadas)

-- git diff: --
Diferencia entre commits, tags, branchs e etc
ex: git diff v0.1 v0.2

-- git whatchanged --
Similar ao git log porem mostra quais arquivos foram alterados, incluidos e removidos

-- 3 estados do GIT --
Working directory: arquivos que estamos trabalhando, modificando
Index: Staging area, area intermediaria antes do commit
HEAD: Arquivos já commitados

-- git remote --
Para criar o repositorio remoto, quando já se tem um repositorio local, usar git remote
ex: git remote add origin <url>
Para ver o repositorio remoto existente, basta usar:
ex: git remote
Para enviar o primerio commit e criar o primeiro branch no rep. remoto:
ex: git push origin master

-- git branch --
Cria e verifica qual branch esta em uso no momento
Ex: git branch alternativo (cria branch alterantivo)
ex: git branch (Mostra todos os branchs e qual esta em uso)
ex: git branch -r (mostra branchs do github)
Para trocar de granch utiliza-se o git checkout.
Ao enviar a brach para o GitHub, fazer da seguinte forma:
ex: git push -u origin alternativo
Criando branch onde aiinda nao existe com link
ex: git branch -t alternativo origin/alternativo
Removendo os branchs
local: git branch -d alternativo
remoto: git push origin :alternativo

-- git merge --
Concatena branches com o branch master
> git merge desenv -> Leva as mudanças da branck desenv para a master

-- git rebase --
Atualiza uma branch com base em outra
> git rebase master desenv -> atualiza desenv com as adições do master
Caso ocorra Conflito, devesse corrigir os arquivos conflitantes e continuar o rebase.
Enquanto estamos nesse 'limbo', as alterações ficam em uma branch chamada (no branch)
> git rebase --continue (tb existem as opções --abort e --skip)

-- git reset --
Para remover um commit indesejado (remove todos até la):
> git reset <id_do_commit>
Caso o arquivo já estiver com add (staging area), deve-se usar o seguinte comando antes
O arquivo volta para o estado de trabalho:
> git reset HEAD arquivo.txt

-- git revert --
Reverte um commit antigo sem perder os commits intermediarios
> git revert <id_do_commit> (um novo commit será gerado fazendo as mudanças)

-- git stash --
Guarda alterações em um local temporario para aplicar correções e depois continuar.
> git stash (é gerado in id de stash)
Pra listar os stachs depois:
> git stash list
Pra aplicar:
> git stach pop <id_do _stach>
Pra remover da lista:
> git stach drop <id_do _stach>

-- git bisect --
Para achar onde uma alteração indesejada foi feita, pode-se usar o bisect, marcando o HEAD como bad
e um commit antigo como good, e assim o bisect vai indo ate achar onde foi feita a alteração.
> git bisect start
> git bisect bad HEAD
> git bisect good <id_commit>
A partir daqui são feitas iterações entre os commits marcados, e vai se marcando bad e good, até
achar onde houve a mudança.

-- Referencias a commits sem o hash --
HEAD: ultimo commit
HEAD~1 ou HEAD^: penultimo commit
HEAD~n: Nsimo commit anterior ao head

-- alias --
Mudando o gitconfig e inserir alias ajuda a agilizar o processo
O arquivo .gitconfig esta na pasta do usuário logado
Ex:
[alias]
   ck = checkout (comando simples)
   puxa = !git pull && git rebase desenv && git add -A (composto)

-- pull request --
Deve-se fazer o fork pelo site do github.
Tambem adicionar o repositorio original para ver futuros commits

-- git cherry-pick ---
Pega um commit especifico de um outro branch e altera o master
> git cherry-pick id_do_commit
